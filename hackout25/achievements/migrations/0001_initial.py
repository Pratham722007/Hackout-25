# Generated by Django 5.2.4 on 2025-08-30 13:39

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('reporter', 'üåç Environmental Reporter'), ('validator', '‚úÖ Data Validator'), ('explorer', 'üó∫Ô∏è Map Explorer'), ('streak', 'üî• Consistency Master'), ('impact', 'üíö Environmental Impact'), ('community', 'üë• Community Builder'), ('expert', 'üéì Expert Analyst'), ('pioneer', 'üöÄ Platform Pioneer')], max_length=20)),
                ('tier', models.CharField(choices=[('bronze', 'Bronze'), ('silver', 'Silver'), ('gold', 'Gold'), ('platinum', 'Platinum'), ('diamond', 'Diamond'), ('legendary', 'Legendary')], max_length=20)),
                ('action_type', models.CharField(choices=[('report_count', 'Number of reports created'), ('validation_count', 'Number of reports validated'), ('streak_days', 'Consecutive days active'), ('map_usage', 'Times used heatmap'), ('high_severity', 'High severity reports found'), ('accuracy_score', 'Validation accuracy percentage'), ('location_variety', 'Different locations reported'), ('report_types', 'Different report types used'), ('quick_response', 'Reports validated within 24 hours'), ('community_help', 'Times helped other users')], max_length=30)),
                ('target_value', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('icon', models.CharField(default='üèÜ', help_text='Emoji icon for achievement', max_length=10)),
                ('color', models.CharField(default='#16a085', help_text='Hex color code', max_length=7)),
                ('points', models.IntegerField(default=10, validators=[django.core.validators.MinValueValidator(1)])),
                ('badge_unlocked', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_hidden', models.BooleanField(default=False, help_text='Hidden until unlocked')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['category', 'tier', 'target_value'],
                'unique_together': {('name', 'tier')},
            },
        ),
        migrations.CreateModel(
            name='AchievementNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('is_displayed', models.BooleanField(default=False, help_text='Has popup been shown')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='achievements.achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievement_notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reports_created', models.IntegerField(default=0)),
                ('reports_validated', models.IntegerField(default=0)),
                ('high_severity_found', models.IntegerField(default=0)),
                ('map_views', models.IntegerField(default=0)),
                ('streak_current', models.IntegerField(default=0)),
                ('streak_best', models.IntegerField(default=0)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('validation_accuracy', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('locations_reported', models.JSONField(default=list, help_text='List of unique location coordinates')),
                ('report_types_used', models.JSONField(default=list, help_text='List of report types used')),
                ('total_points', models.IntegerField(default=0)),
                ('achievements_unlocked', models.IntegerField(default=0)),
                ('level', models.IntegerField(default=1)),
                ('helpful_validations', models.IntegerField(default=0)),
                ('community_contributions', models.IntegerField(default=0)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='stats', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('leaderboard_type', models.CharField(choices=[('points', 'Total Points'), ('reports', 'Reports Created'), ('validations', 'Reports Validated'), ('streak', 'Best Streak'), ('achievements', 'Achievements Unlocked')], max_length=20)),
                ('score', models.IntegerField()),
                ('rank', models.IntegerField()),
                ('period_start', models.DateField()),
                ('period_end', models.DateField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['leaderboard_type', 'rank'],
                'unique_together': {('leaderboard_type', 'user', 'period_start', 'period_end')},
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_progress', models.IntegerField(default=0)),
                ('is_unlocked', models.BooleanField(default=False)),
                ('unlocked_at', models.DateTimeField(blank=True, null=True)),
                ('notification_sent', models.BooleanField(default=False)),
                ('is_featured', models.BooleanField(default=False, help_text='Show in user profile highlights')),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='achievements.achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-unlocked_at', '-current_progress'],
                'unique_together': {('user', 'achievement')},
            },
        ),
    ]
